#!/bin/bash

# Emacs setup script.
# Brian Sorahan

function main {
    # Backup the old .emacs file
    mv ~/.emacs ~/.emacs.old

    # Setup my emacs environment without me having to lift a finger!
    PWD=`pwd`
    TEMP=/tmp
    MODES=${PWD}/modes

    # Default workgroup is relative to the emacs-setup repo
    DEFAULT_WORKGROUP="${PWD}/workgroups/default.el"

    # Directory where we will put .el files.
    # This can be overridden with the -d option, but *must* be on your
    # emacs load-path. 
    EMACS_LOAD_DIR=~/emacs-setup/modes

    # Load key bindings from a file
    KEY_BINDINGS=`cat keybindings.el`

    # Load other configuration
    CONF_EL=`cat conf.el`

    ################################
    # Get command-line options
    ################################
    while getopts "d:u:" option
    do
	case $option in
            d ) EMACS_LOAD_DIR=$OPTARG ;; 
	esac
    done

    ################################
    # Create the .emacs file
    ################################
    cat >~/.emacs <<DOT_EMACS

;; This file was automatically generated by github.com/briansorahan/emacs-setup

${KEY_BINDINGS}

;; make pretty colors in the shell
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; Add to load-path
(add-to-list 'load-path "${EMACS_LOAD_DIR}")
(add-to-list 'load-path "${EMACS_LOAD_DIR}/haskell-mode")

;; tcl mode for expect
(add-to-list 'auto-mode-alist '(".exp$" . tcl-mode))
(add-to-list 'interpreter-mode-alist '("expect" . tcl-mode))

;; Workgroups
;; (require 'workgroups)
;; (workgroups-mode 1)
;; (wg-load "${DEFAULT_WORKGROUP}")

;; Dired-details
;; (require 'dired-details)
;; (require 'dired-details+)

;; buffer-move
(require 'buffer-move)

;; redo+
;; (require 'redo+)

;; mac-key-mode
;; (require 'mac-key-mode)
;; (mac-key-mode 1)

;; packages
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ("marmalade" . "http://marmalade-repo.org/packages/")
                         ("melpa" . "http://melpa.milkbox.net/packages/")))

;; chuck-mode
(require 'chuck-mode)

;; coffee-mode
(require 'coffee-mode)
(add-to-list 'auto-mode-alist '("coffee$" . coffee-mode))

;; less-css-mode
;; (require 'less-css-mode)

;; quacks racket mode
(require 'quack)

;; slime
(setq inferior-lisp-program "/usr/bin/sbcl")
(require 'slime)
(slime-setup)

;; rust
(autoload 'rust-mode "rust-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.rs$" . rust-mode))

;; protobuf
(require 'protobuf-mode)

;; go
(require 'go-mode-load)

;; lua
(autoload 'lua-mode "lua-mode" "Lua editing mode." t)
(add-to-list 'auto-mode-alist '("\\.lua$" . lua-mode))
(add-to-list 'interpreter-mode-alist '("lua" . lua-mode))

;; erlang
(require 'erlang-start)

;; web-mode
(require 'web-mode)
(add-to-list 'auto-mode-alist '(".dtl$"            . web-mode))
(add-to-list 'auto-mode-alist '(".html$"         . web-mode))
(add-to-list 'auto-mode-alist '(".php$"          . web-mode))
(add-to-list 'auto-mode-alist '(".css$"          . web-mode))

(setq web-mode-engines-alist
    '(("django"               . ".dtl$")
      ("underscorejs"         . ".html$")))

;; js2-mode
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
(setq js2-basic-offset 2)
(setq js2-global-externs '("module" "process" "console" "Buffer"))

(require 'json-snatcher)
(require 'json-reformat)
(require 'json-mode)
(add-to-list 'auto-mode-alist '("\\.json$" . json-mode))

;; js3-mode
;; (autoload 'js3-mode "js3" nil t)
;; (add-to-list 'auto-mode-alist '("\\.js$" . js3-mode))
;; (add-to-list 'interpreter-mode-alist '("node" . js2-mode))

;; yaml-mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
(add-hook 'yaml-mode-hook
  '(lambda ()
     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

;; faust mode
(setq auto-mode-alist (cons '("\\.dsp$" . faust-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.lib$" . faust-mode) auto-mode-alist))
(autoload 'faust-mode "faust-mode" "FAUST editing mode." t)

;; pure-mode
(require 'pure-mode)
(setq auto-mode-alist (cons '("\\.pure\\(rc\\)?$" . pure-mode) auto-mode-alist))
(add-hook 'pure-mode-hook 'turn-on-font-lock)
(add-hook 'pure-eval-mode-hook 'turn-on-font-lock)

;; sclang-mode
;; (require 'sclang)

;; clojure-mode
;; (require 'clojure-mode)
;; (setq auto-mode-alist (cons '("\\.clj$" . clojure-mode) auto-mode-alist))
;; (add-hook 'clojure-mode-hook 'paredit-mode)

;; hsc3
(add-to-list 'load-path "~/.cabal/share/hsc3-0.14/emacs")
(setq hsc3-help-directory "~/.cabal/share/hsc3-0.14/Help")
(require 'hsc3)

;; jinja2
(require 'jinja2-mode)
(add-to-list 'auto-mode-alist '("\\.j2$" . jinja2-mode))

;; dockerfile
(require 'dockerfile-mode)
(add-to-list 'auto-mode-alist '("Dockerfile\\'" . dockerfile-mode))

;; additional configuration

;; indent java annotations properly
(add-hook 'java-mode-hook
    (lambda ()
     "Treat Java 1.5 @-style annotations as comments."
     (setq c-comment-start-regexp "(@|/(/|[*][*]?))")
     (modify-syntax-entry ?@ "< b" java-mode-syntax-table)))

;; create TAGS from within emacs
(defun create-tags (dir-name)
     "Create tags file."
     (interactive "DDirectory: ")
     (eshell-command 
      (format "find %s -type f -name \"*.[ch]\" | etags -" dir-name)))

${CONF_EL}

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(indent-tabs-mode nil))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )
DOT_EMACS

    ################################
    # Setup modes
    ################################
    rsync -ahurv ${MODES}/*.el ${EMACS_LOAD_DIR}
    cd ${EMACS_LOAD_DIR}
    emacs --batch -f batch-byte-compile *.el
    # cd haskell-mode
    # make all
    # cd ..

    local bash_rc=~/.bashrc
    if [[ -f $bash_rc && -z $(grep 'alias em=' $bash_rc) ]]; then
        echo "" >> $bash_rc
        echo "alias em='emacs -nw'" >> $bash_rc
        echo "added alias em='emacs -nw' to $bash_rc"
    fi
}

main "$@"
