#!/bin/bash

# Emacs setup script.
# Brian Sorahan

main() {
    # Warn the user of the dangers of running this script!
    echo    "This script will backup your .emacs file (as .emacs.old) and create a new one!"
    echo -n "Would you like to continue? "
    read CONTINUE
    if [ ${CONTINUE:0:1} = "n" ] || [ ${CONTINUE:0:1} = "N" ]; then
	exit
    fi

    # Backup the old .emacs file
mv ~/.emacs ~/.emacs.old

    # Setup my emacs environment without me having to lift a finger!
    PWD=`pwd`
    TEMP=/tmp

    # js2-mode repo
    # This is a fork of mooz's repo with default indentation set to 2 spaces.
    JS2_REPO="git://github.com/briansorahan/js2-mode.git"

    # workgroups repo
    WORKGROUPS_REPO="git://github.com/tlh/workgroups.el.git"

    # Default workgroup is relative to the emacs-setup repo
    DEFAULT_WORKGROUP="${PWD}/workgroups/default.el"

    # Directory where we will put .el files.
    # This can be overridden with the -d option, but *must* be on your
    # emacs load-path. 
    EMACS_LOAD_DIR=~/.emacs.d/site-lisp

    # Load key bindings from a file
    KEY_BINDINGS=`cat keybindings.el`

    # Load other configuration
    CONF_EL=`cat conf.el`

    ################################################################################
    # Get command-line options
    ################################################################################
    while getopts "d:u:" option
    do
	case $option in
            d ) EMACS_LOAD_DIR=$OPTARG ;; 
	esac
    done

    if [ ! -d ${EMACS_LOAD_DIR} ]; then
	mkdir -p ${EMACS_LOAD_DIR}
    fi

    ################################################################################
    # Create the .emacs file
    ################################################################################
    cat >~/.emacs <<DOT_EMACS

;; This file was automatically generated by emacs-setup/run

${KEY_BINDINGS}

;; make pretty colors in the shell
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)

;; Add to load-path
(add-to-list 'load-path "${EMACS_LOAD_DIR}")

;; js2-mode
(autoload 'js2-mode "js2-mode" nil t)
(add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))

;; Workgroups
(require 'workgroups)
(workgroups-mode 1)
(wg-load "${DEFAULT_WORKGROUP}")

;; Dired-details
(require 'dired-details)
(require 'dired-details+)

;; buffer-move
(require 'buffer-move)

;; hide/show
(add-hook 'js2-mode-hook
          (lambda ()
            ;; Scan the file for nested code blocks
            (imenu-add-menubar-index)
            ;; Activate the folding mode
            (hs-minor-mode t)))

;; js-comint with node REPL
(require 'js-comint)
(setq inferior-js-program-command "node")
(setq inferior-js-mode-hook
      (lambda ()
        ;; We like nice colors
        (ansi-color-for-comint-mode-on)
        ;; Deal with some prompt nonsense
        (add-to-list 'comint-preoutput-filter-functions
                     (lambda (output)
                       (replace-regexp-in-string ".*1G\.\.\..*5G" "..."
                     (replace-regexp-in-string ".*1G.*3G" "&gt;" output))))))

;; chuck-mode
(require 'chuck-mode)

;; coffee-mode
(require 'coffee-mode)
(add-to-list 'auto-mode-alist '("coffee$" . coffee-mode))

;; additional configuration

${CONF_EL}
DOT_EMACS

    ################################################################################
    # Setup js2-mode
    ################################################################################

    cd ${TEMP}
    if [ -d js2-mode ]; then
	rm -rf js2-mode
    fi
    git clone ${JS2_REPO}
    cd js2-mode
    emacs --batch --eval '(byte-compile-file "js2-mode.el")'
    rm -rf ${EMACS_LOAD_DIR}/js2-mode*
    cp js2-mode.elc ${EMACS_LOAD_DIR}
    cd .. && rm -rf js2-mode

    ################################################################################
    # Setup workgroups
    ################################################################################

    cd ${TEMP}
    if [ -d workgroups.el ]; then
	rm -rf workgroups.el
    fi
    git clone ${WORKGROUPS_REPO}
    cd workgroups.el
    emacs --batch --eval '(byte-compile-file "workgroups.el")'
    rm -rf ${EMACS_LOAD_DIR}/workgroups*
    cp workgroups.elc ${EMACS_LOAD_DIR}
    cd .. && rm -rf workgroups.el

    ################################################################################
    # Setup dired-details (and dired-details+)
    ################################################################################

    cd ${EMACS_LOAD_DIR}
    rm -rf dired-details*
    wget http://www.emacswiki.org/emacs/download/dired-details.el
    wget http://www.emacswiki.org/emacs-en/download/dired-details%2b.el
    emacs --batch --eval '(byte-compile-file "dired-details.el")'
    emacs --batch --eval '(byte-compile-file "dired-details+.el")'

    ################################################################################
    # Setup buffer-move
    ################################################################################

    cd ${EMACS_LOAD_DIR}
    rm -rf buffer-move*
    wget http://www.emacswiki.org/emacs/download/buffer-move.el
    emacs --batch --eval '(byte-compile-file "buffer-move.el")'

    ################################################################################
    # Setup js-comint
    ################################################################################

    cd ${EMACS_LOAD_DIR}
    rm -rf js-comint*
    wget http://downloads.sourceforge.net/js-comint-el/js-comint.el
    emacs --batch --eval '(byte-compile-file "js-comint.el")'

    ################################################################################
    # Setup chuck-mode
    ################################################################################

    cd ${EMACS_LOAD_DIR}
    rm -rf chuck-mode*
    wget http://www.mikael.johanssons.org/chuck.el
    mv chuck.el chuck-mode.el
    emacs --batch --eval '(byte-compile-file "chuck-mode.el")'
    
    ################################################################################
    # Setup coffee-mode
    ################################################################################

    cd ${EMACS_LOAD_DIR}
    rm -rf coffee-mode*
    git clone https://github.com/defunkt/coffee-mode.git
    mv coffee-mode/coffee-mode.el . && rm -rf coffee-mode
    emacs --batch --eval '(byte-compile-file "coffee-mode.el")'
}

main "$@"